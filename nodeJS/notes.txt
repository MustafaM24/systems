Variables:
  Declaration: let variableName = value; or const constantName = value;
  Example: let message = 'Hello, World!';


Functions:
  Declaration: function functionName(parameters) { // code } or (parameters) => { // code }
  Example:
    function greet(name) {
      console.log('Hello, ' + name + '!');
    }
    greet('John');


Control Flow:
  Conditionals:
    if (condition) {
      // code executed if condition is true
    } else {
      // code executed if condition is false
    }

  Loops:
    for loop:
      for (let i = 0; i < 5; i++) {
        // code executed in each iteration
      }
    while loop:
      while (condition) {
        // code executed while condition is true
      }


Modules:
  Importing Modules:
    const fs = require('fs');

  Exporting Modules:
    module.exports = {
      functionName: function() {
        // code
      },
      variableName: value
    };


File System Operations:
  Reading a file:
    const fs = require('fs');
    fs.readFile('filename.txt', 'utf8', (err, data) => {
      if (err) throw err;
      console.log(data);
    });

  Writing to a file:
    const fs = require('fs');
    fs.writeFile('filename.txt', 'Hello, World!', (err) => {
      if (err) throw err;
      console.log('File written successfully.');
    });



What is 'fs':
  In Node.js, the fs module stands for "File System" and provides methods for interacting with the file system. 
It allows you to perform various file-related operations, such as reading from and writing to files, creating and deleting files and directories, and manipulating file metadata.  
To use the fs module, you need to import it into your Node.js script using the require function:

const fs = require('fs');

Once the fs module is imported, you can access its methods and perform file system operations.
Here are a few common methods provided by the fs module:

Reading a file:
  fs.readFile(path[, options], callback) - Reads the contents of a file asynchronously.

Writing to a file:
  fs.writeFile(file, data[, options], callback) - Writes data to a file asynchronously, overwriting the existing content.
  fs.appendFile(file, data[, options], callback) - Appends data to a file asynchronously, without overwriting the existing content.

File and Directory operations:
  fs.mkdir(path[, options], callback) - Creates a new directory asynchronously.
  fs.readdir(path[, options], callback) - Reads the contents of a directory asynchronously.
  fs.rename(oldPath, newPath, callback) - Renames a file or directory asynchronously.
  fs.unlink(path, callback) - Deletes a file asynchronously.
  fs.rmdir(path, callback) - Removes an empty directory asynchronously.

File Metadata and Information:
  fs.stat(path, callback) - Retrieves information about a file asynchronously, such as size, permissions, and timestamps.
